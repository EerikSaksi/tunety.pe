{"version":3,"sources":["components/universal/loading.js","media/loading.gif","App.js","serviceWorker.js","index.js"],"names":["Loading","style","centered","loading","src","require","left","right","position","transform","module","exports","SelectedGeniusResult","lazy","CreateLyricsSync","GameEntry","Home","App","exact","path","fallback","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","addTypeName","YTConfig","host","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAA,8DAIe,SAASA,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAChCC,EAAU,kBAAC,IAAD,CAAOF,MAAOA,EAAOG,IAAKC,EAAQ,MAClD,OAAIH,EAEA,yBAAKD,MAAO,CAACK,KAAM,EAAGC,MAAO,IAC3B,yBAAKN,MAAO,CAACO,SAAU,WAAYF,KAAM,MAAOG,UAAW,yBACxDN,IAKDA,I,iGCfVO,EAAOC,QAAU,IAA0B,qC,iHCSrCC,EAAuBC,gBAAK,kBAAM,uDAClCC,EAAmBD,gBAAK,kBAAM,wDAC9BE,EAAYF,gBAAK,kBAAM,qEACvBG,EAAOH,gBAAK,kBAAM,8DAGT,SAASI,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAASlB,UAAQ,KACnC,kBAACc,EAAD,QAGJ,kBAAC,IAAD,CAAOG,KAAK,gBACV,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAASlB,UAAQ,KACnC,kBAACU,EAAD,QAGJ,kBAAC,IAAD,CAAOO,KAAK,2BACV,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAASlB,UAAQ,KACnC,kBAACY,EAAD,QAGJ,kBAAC,IAAD,CAAOK,KAAK,2BACV,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAASlB,UAAQ,KACnC,kBAACa,EAAD,WCzBMM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCRAC,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,IAAc,CAACC,aAAa,OAEzCT,OAAOU,SAAW,CAChBC,KAAM,2BAGRC,IAASC,OACP,kBAAC,IAAD,CAAgBT,OAAQA,GACtB,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86203c3e.chunk.js","sourcesContent":["import React from 'react'\nimport Image from 'react-bootstrap/Image'\n//import LoadingGif from 'media/loading.gif'\n\nexport default function Loading({style, centered}) {\n  const loading = <Image style={style} src={require('../../media/loading.gif')}></Image >\n  if (centered) {\n    return (\n      <div style={{left: 0, right: 0}}>\n        <div style={{position: 'absolute', left: '50%', transform: 'translate(-50%, 0px)'}}>\n          {loading}\n        </div>\n      </div>\n    )\n  }\n  return (loading)\n}\n\n","module.exports = __webpack_public_path__ + \"static/media/loading.23d5d188.gif\";","import React, {Suspense, lazy} from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Loading from 'components/universal/loading'\n\nconst SelectedGeniusResult = lazy(() => import('components/navigation/selected_genius_result'))\nconst CreateLyricsSync = lazy(() => import('components/lyrics/syncing/lyrics_sync_router.js/'))\nconst GameEntry = lazy(() => import('components/lyrics/playing/game_entry/'))\nconst Home = lazy(() => import('components/navigation/home'));\n\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Suspense fallback={<Loading centered/>}>\n              <Home />\n            </Suspense>\n          </Route>\n          <Route path=\"/g/:geniusID\">\n            <Suspense fallback={<Loading centered/>}>\n              <SelectedGeniusResult />\n            </Suspense>\n          </Route>\n          <Route path=\"/s/:youtubeID/:geniusID\">\n            <Suspense fallback={<Loading centered/>}>\n              <CreateLyricsSync />\n            </Suspense >\n          </Route>\n          <Route path=\"/p/:youtubeID/:geniusID\">\n            <Suspense fallback={<Loading centered/>}>\n              <GameEntry />\n            </Suspense>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient, {InMemoryCache} from 'apollo-boost';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache({addTypeName: false})\n});\nwindow.YTConfig = {\n  host: 'https://www.youtube.com'\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}