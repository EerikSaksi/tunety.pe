import React, { useEffect, useState } from 'react';
import { gql } from 'apollo-boost'
import { useLazyQuery, useQuery } from '@apollo/react-hooks';
import useUrlListener from './use_url_listener';
const GET_CAPTIONS = gql`
query getcaptions($url: String){
  getCaptions(url: $url){ 
    text
    dur
    sleepAfter
    horizontalPosition
    id
  }
}
`
function useTypeables(){
  const [typeables, setTypeables] = useState([]);
  const [iterateCaptions, setIterateCaptions] = useState(false);
  const [deployedTypeables, setDeployedTypeables] = useState([]);
  const [validUrl] = useUrlListener()
  const [ fetchCaptions, {data:captionData}] = useLazyQuery(GET_CAPTIONS, {
    variables : {url: validUrl},
    onCompleted: (({data}) => {
      setTypeables(data);
    })
  })

  //listen to the input if we are iterating over captions and captions have been fetched (a game is ongoing)
  function sleep(s) {
    return new Promise(resolve => setTimeout(resolve, 1000 * s));
  }

  function deleteID(){
    const firstMatchingIndex = newTypeables.findIndex(t => t.text === inputData.input);
    if (firstMatchingIndex != -1){
      setNewTypeables(newTypeables.filter((element, index) => index != firstMatchingIndex));
    }
  }
  async function mapCaptions(){
    await sleep(data.getCaptions[0].dur);    
    var reducedSleep = 0.0;
    for (var i = 1; i < data.getCaptions.length; i++){
      const beforeSleep = Date.now();
      setNewTypeables(newTypeables => [...newTypeables, data.getCaptions[i]]);
      await sleep(data.getCaptions[i].sleepAfter - reducedSleep);
      //next time sleep less based on how much longer the sleep took than it was supposed to
      reducedSleep = (Date.now() - beforeSleep) / 1000 - data.getCaptions[i].sleepAfter;
    }
  }
  useEffect(() => {
    fetchCaptions();
  }, [validUrl])

  useEffect(() => {
    fetchCaptions();
  }, [validUrl, data])


  useEffect(() => {
    if (iterateCaptions && captionsFetched){
      mapCaptions();
    }
  }, [iterateCaptions, captionsFetched])


  return [newTypeables, setIterateCaptions, deleteID]; 
}
export default useTypeables;
