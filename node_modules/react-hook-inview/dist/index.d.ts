import { RefObject, Dispatch, SetStateAction, ComponentState } from 'react';
declare type Ref = Element | null;
declare type SetRef = Dispatch<SetStateAction<Ref>>;
declare type ExternalState = ComponentState[];
interface OnIntersectCallback {
    (entry: IntersectionObserverEntry, observer: IntersectionObserver): void;
}
interface UseInViewOptions extends IntersectionObserverInit {
    target?: RefObject<Ref>;
    onEnter?: OnIntersectCallback;
    onLeave?: OnIntersectCallback;
    unobserveOnEnter?: boolean;
}
interface UseInViewState {
    inView: boolean;
    entry: IntersectionObserverEntry | null;
}
declare type Hook = [SetRef, UseInViewState['inView'], UseInViewState['entry'], IntersectionObserver | null];
interface UseInViewEffect {
    (callback: IntersectionObserverCallback, options?: IntersectionObserverInit, externalState?: ExternalState): SetRef;
}
interface UseInView {
    (options?: UseInViewOptions, externalState?: ExternalState): Hook;
}
export declare const useInViewEffect: UseInViewEffect;
export declare const useInView: UseInView;
export {};
