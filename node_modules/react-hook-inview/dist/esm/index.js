var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useEffect, useState, useRef, useCallback, } from 'react';
const useObserver = (ref, callback, options = {}, externalState = []) => {
    const Observer = useRef(null);
    const onIntersect = useCallback(callback, [ref, ...externalState]);
    useEffect(() => {
        if (!ref)
            return;
        if (Observer.current)
            Observer.current.unobserve(ref);
        Observer.current = new IntersectionObserver(onIntersect, options);
        const { current: currentObserver } = Observer;
        currentObserver.observe(ref);
        return () => currentObserver.unobserve(ref);
    }, [ref, ...externalState]);
    return Observer.current;
};
export const useInViewEffect = (callback, options = {}, externalState = []) => {
    const [ref, setRef] = useState(null);
    useObserver(ref, callback, options, externalState);
    return setRef;
};
export const useInView = (options, externalState = []) => {
    const ops = __rest(options, []);
    const { root = null, rootMargin = '0px 0px 0px 0px', threshold = 0, target, onEnter, onLeave, unobserveOnEnter, } = ops;
    const [ref, setRef] = useState(null);
    const [state, setState] = useState({
        inView: false,
        entry: null,
    });
    const callback = ([entry], observer) => {
        if (!ref || !entry || !observer)
            return;
        const { isIntersecting, intersectionRatio } = entry;
        if (intersectionRatio >= 0) {
            const inThreshold = observer.thresholds.some(threshold => intersectionRatio >= threshold);
            const inView = inThreshold && isIntersecting;
            setState({
                inView,
                entry,
            });
            if (inView) {
                onEnter && onEnter(entry, observer);
                if (unobserveOnEnter)
                    observer.unobserve(ref);
            }
            else {
                onLeave && onLeave(entry, observer);
            }
        }
    };
    useEffect(() => {
        if (!target)
            return;
        setRef(target.current);
    }, [target]);
    const observer = useObserver(ref, callback, { root, rootMargin, threshold }, externalState);
    return [setRef, state.inView, state.entry, observer];
};
