"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var useObserver = function (ref, callback, options, externalState) {
    if (options === void 0) { options = {}; }
    if (externalState === void 0) { externalState = []; }
    var Observer = react_1.useRef(null);
    var onIntersect = react_1.useCallback(callback, __spreadArrays([ref], externalState));
    react_1.useEffect(function () {
        if (!ref)
            return;
        if (Observer.current)
            Observer.current.unobserve(ref);
        Observer.current = new IntersectionObserver(onIntersect, options);
        var currentObserver = Observer.current;
        currentObserver.observe(ref);
        return function () { return currentObserver.unobserve(ref); };
    }, __spreadArrays([ref], externalState));
    return Observer.current;
};
exports.useInViewEffect = function (callback, options, externalState) {
    if (options === void 0) { options = {}; }
    if (externalState === void 0) { externalState = []; }
    var _a = react_1.useState(null), ref = _a[0], setRef = _a[1];
    useObserver(ref, callback, options, externalState);
    return setRef;
};
exports.useInView = function (options, externalState) {
    if (externalState === void 0) { externalState = []; }
    var ops = __rest(options, []);
    var _a = ops.root, root = _a === void 0 ? null : _a, _b = ops.rootMargin, rootMargin = _b === void 0 ? '0px 0px 0px 0px' : _b, _c = ops.threshold, threshold = _c === void 0 ? 0 : _c, target = ops.target, onEnter = ops.onEnter, onLeave = ops.onLeave, unobserveOnEnter = ops.unobserveOnEnter;
    var _d = react_1.useState(null), ref = _d[0], setRef = _d[1];
    var _e = react_1.useState({
        inView: false,
        entry: null,
    }), state = _e[0], setState = _e[1];
    var callback = function (_a, observer) {
        var entry = _a[0];
        if (!ref || !entry || !observer)
            return;
        var isIntersecting = entry.isIntersecting, intersectionRatio = entry.intersectionRatio;
        if (intersectionRatio >= 0) {
            var inThreshold = observer.thresholds.some(function (threshold) { return intersectionRatio >= threshold; });
            var inView = inThreshold && isIntersecting;
            setState({
                inView: inView,
                entry: entry,
            });
            if (inView) {
                onEnter && onEnter(entry, observer);
                if (unobserveOnEnter)
                    observer.unobserve(ref);
            }
            else {
                onLeave && onLeave(entry, observer);
            }
        }
    };
    react_1.useEffect(function () {
        if (!target)
            return;
        setRef(target.current);
    }, [target]);
    var observer = useObserver(ref, callback, { root: root, rootMargin: rootMargin, threshold: threshold }, externalState);
    return [setRef, state.inView, state.entry, observer];
};
